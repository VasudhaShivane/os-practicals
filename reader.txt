#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <stdint.h>

#define R 5
#define W 5

int readcount;
int writecount;
pthread_mutex_t x;
sem_t wsem; // mutual exclusion
int h = 11, m = 55;

void* reader1(void *a);
void* writer1(void *a);

int main() {
    int i, op;
    pthread_t thread_read[R], thread_write[W];
    pthread_mutex_init(&x, NULL);
    sem_init(&wsem, 0, 1);
    readcount = 0;

    for (i = 0; i < W; i++) {
        pthread_create(&thread_write[i], NULL, writer1, (void*)(intptr_t)i);
    }

    for (i = 0; i < R; i++) {
        pthread_create(&thread_read[i], NULL, reader1, (void*)(intptr_t)i);
    }

    for (i = 0; i < W; i++) {
        pthread_join(thread_write[i], NULL);
    }

    for (i = 0; i < R; i++) {
        pthread_join(thread_read[i], NULL);
    }
}

void* reader1(void *a) {
    intptr_t r = (intptr_t)a;
    int i = 0;
    while (i < 5) {
        pthread_mutex_lock(&x);
        readcount++;
        if (readcount == 1)
            sem_wait(&wsem);
        pthread_mutex_unlock(&x);

        printf("\t\tReader %ld is reading: %d \t %d \n", r, h, m);

        pthread_mutex_lock(&x);
        readcount--;
        if (readcount == 0)
            sem_post(&wsem);
        pthread_mutex_unlock(&x);

        sleep(rand() % 10);
        i++;
    }
}

void* writer1(void *a) {
    intptr_t w = (intptr_t)a;
    int i = 0;
    while (i < 2) {
        sem_wait(&wsem);
        m += 1;
        if (m > 59) {
            m = 0;
            h += 1;
        }
        printf("Writer %ld is writing: %d \t %d \n", w, h, m);
        sem_post(&wsem);
        sleep(rand() % 10);
        i++;
    }
}
